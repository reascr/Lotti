# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'playingaround.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pandas as pd

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(671, 760)
        MainWindow.setStyleSheet("background-color : rgb(173, 180, 175)")
        MainWindow.setAnimated(True)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.b1 = QtWidgets.QPushButton(self.centralwidget)
        self.b1.setGeometry(QtCore.QRect(520, 100, 321, 111))
        font = QtGui.QFont()
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.b1.setFont(font)
        self.b1.setStyleSheet("background-color: rgb(193, 164, 234); color: white; border-style: outset; border-width: 2px;  border-radius: 10px; border-color: beige; padding: 10px\n"
"\n"
"")
        self.b1.setObjectName("b1")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(370, 310, 661, 481))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("Logo.jpg"))
        self.label.setScaledContents(True)
        self.label.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 671, 24))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.menubar.sizePolicy().hasHeightForWidth())
        self.menubar.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.menubar.setFont(font)
        self.menubar.setObjectName("menubar")
        self.menuaktuellerMonat = QtWidgets.QMenu(self.menubar)
        self.menuaktuellerMonat.setObjectName("menuaktuellerMonat")
        self.menuMonatsabrechnungen = QtWidgets.QMenu(self.menubar)
        self.menuMonatsabrechnungen.setObjectName("menuMonatsabrechnungen")
        self.menuStatistiken = QtWidgets.QMenu(self.menubar)
        self.menuStatistiken.setObjectName("menuStatistiken")
        self.menu_Monats_bersicht_Einnahmen = QtWidgets.QMenu(self.menuStatistiken)
        self.menu_Monats_bersicht_Einnahmen.setObjectName("menu_Monats_bersicht_Einnahmen")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionStatistiken = QtWidgets.QAction(MainWindow)
        self.actionStatistiken.setObjectName("actionStatistiken")
        self.actionAnsicht_Excel_Datei = QtWidgets.QAction(MainWindow)
        self.actionAnsicht_Excel_Datei.setObjectName("actionAnsicht_Excel_Datei")
        self.actionJanuar = QtWidgets.QAction(MainWindow)
        self.actionJanuar.setObjectName("actionJanuar")
        self.actionFebruar = QtWidgets.QAction(MainWindow)
        self.actionFebruar.setObjectName("actionFebruar")
        self.actionM_rz = QtWidgets.QAction(MainWindow)
        self.actionM_rz.setObjectName("actionM_rz")
        self.actionApril = QtWidgets.QAction(MainWindow)
        self.actionApril.setObjectName("actionApril")
        self.actionMai = QtWidgets.QAction(MainWindow)
        self.actionMai.setObjectName("actionMai")
        self.actionJuni = QtWidgets.QAction(MainWindow)
        self.actionJuni.setObjectName("actionJuni")
        self.actionJuli = QtWidgets.QAction(MainWindow)
        self.actionJuli.setObjectName("actionJuli")
        self.actionAugust = QtWidgets.QAction(MainWindow)
        self.actionAugust.setObjectName("actionAugust")
        self.actionSeptember = QtWidgets.QAction(MainWindow)
        self.actionSeptember.setObjectName("actionSeptember")
        self.actionOktober = QtWidgets.QAction(MainWindow)
        self.actionOktober.setObjectName("actionOktober")
        self.actionNovember = QtWidgets.QAction(MainWindow)
        self.actionNovember.setObjectName("actionNovember")
        self.actionDezember = QtWidgets.QAction(MainWindow)
        self.actionDezember.setObjectName("actionDezember")
        self.actionJahres_bersicht = QtWidgets.QAction(MainWindow)
        self.actionJahres_bersicht.setObjectName("actionJahres_bersicht")
        self.actionJanuar_2 = QtWidgets.QAction(MainWindow)
        self.actionJanuar_2.setObjectName("actionJanuar_2")
        self.actionFebruar_2 = QtWidgets.QAction(MainWindow)
        self.actionFebruar_2.setObjectName("actionFebruar_2")
        self.actionM_rz_2 = QtWidgets.QAction(MainWindow)
        self.actionM_rz_2.setObjectName("actionM_rz_2")
        self.menuaktuellerMonat.addAction(self.actionAnsicht_Excel_Datei)
        self.menuMonatsabrechnungen.addSeparator()
        self.menuMonatsabrechnungen.addAction(self.actionJanuar)
        self.menuMonatsabrechnungen.addAction(self.actionFebruar)
        self.menuMonatsabrechnungen.addAction(self.actionM_rz)
        self.menuMonatsabrechnungen.addAction(self.actionApril)
        self.menuMonatsabrechnungen.addAction(self.actionMai)
        self.menuMonatsabrechnungen.addAction(self.actionJuni)
        self.menuMonatsabrechnungen.addAction(self.actionJuli)
        self.menuMonatsabrechnungen.addAction(self.actionAugust)
        self.menuMonatsabrechnungen.addAction(self.actionSeptember)
        self.menuMonatsabrechnungen.addAction(self.actionOktober)
        self.menuMonatsabrechnungen.addAction(self.actionNovember)
        self.menuMonatsabrechnungen.addAction(self.actionDezember)
        self.menu_Monats_bersicht_Einnahmen.addAction(self.actionJanuar_2)
        self.menu_Monats_bersicht_Einnahmen.addAction(self.actionFebruar_2)
        self.menu_Monats_bersicht_Einnahmen.addAction(self.actionM_rz_2)
        self.menuStatistiken.addAction(self.menu_Monats_bersicht_Einnahmen.menuAction())
        self.menuStatistiken.addAction(self.actionJahres_bersicht)
        self.menubar.addAction(self.menuaktuellerMonat.menuAction())
        self.menubar.addAction(self.menuMonatsabrechnungen.menuAction())
        self.menubar.addAction(self.menuStatistiken.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.b1.setText(_translate("MainWindow", " Monatsabrechnung erstellen"))
        # Kopie von tryingobject.py
        self.b1.clicked.connect(self.clicked) 
        #
        self.menuaktuellerMonat.setTitle(_translate("MainWindow", "Aktueller Monat"))
        self.menuMonatsabrechnungen.setTitle(_translate("MainWindow", "Monatsabrechnungen"))
        self.menuStatistiken.setTitle(_translate("MainWindow", "Statistiken"))
        self.menu_Monats_bersicht_Einnahmen.setTitle(_translate("MainWindow", " Monatsübersicht Einnahmen"))
        self.actionStatistiken.setText(_translate("MainWindow", "Statistiken"))
        self.actionAnsicht_Excel_Datei.setText(_translate("MainWindow", "Ansicht Excel-Datei"))
        self.actionJanuar.setText(_translate("MainWindow", "Januar"))
        self.actionFebruar.setText(_translate("MainWindow", "Februar"))
        self.actionM_rz.setText(_translate("MainWindow", "März"))
        self.actionApril.setText(_translate("MainWindow", "April"))
        self.actionMai.setText(_translate("MainWindow", "Mai"))
        self.actionJuni.setText(_translate("MainWindow", "Juni"))
        self.actionJuli.setText(_translate("MainWindow", "Juli"))
        self.actionAugust.setText(_translate("MainWindow", "August"))
        self.actionSeptember.setText(_translate("MainWindow", "September"))
        self.actionOktober.setText(_translate("MainWindow", "Oktober"))
        self.actionNovember.setText(_translate("MainWindow", "November"))
        self.actionDezember.setText(_translate("MainWindow", "Dezember"))
        self.actionJahres_bersicht.setText(_translate("MainWindow", "Jahresübersicht Einnahmen"))
        self.actionJanuar_2.setText(_translate("MainWindow", "Januar"))
        self.actionFebruar_2.setText(_translate("MainWindow", "Februar"))
        self.actionM_rz_2.setText(_translate("MainWindow", "März"))

    # Kopie von tryingobject.py
    def clicked(self):
        df = pd.read_csv("/Users/rea/Documents/ProgrammLotti/Stundentabelle.csv",sep=";")
        Schüler = [x.strip() for x in df["Schüler"].unique()]
        Lehrer = [x.strip() for x in df["Lehrer"].unique()]
        Schüler_Min_Betrag = 19.50/60
        Lehrer_Min_Betrag = 10/60 
    # Schüler in neuen DataFrame
        Minuten_ges = list()
        Betrag_ges = list()

        Minuten_ges_l = list()
        Betrag_ges_l = list()

        # Minuten gesamt
        for s in Schüler:
            Min_ges = sum(df["Dauer_min"].where(df["Schüler"] == s.strip()).dropna())
            Minuten_ges.append(Min_ges)
            Bet_ges = Min_ges * Schüler_Min_Betrag
            Betrag_ges.append(Bet_ges)


        # neuer Dataframe
        Schüler_df = pd.DataFrame(Schüler, columns=["Schüler"])
        Schüler_df["Minuten_ges"] = Minuten_ges
        Schüler_df["Betrag_ges"] = Betrag_ges

        Schüler_df = Schüler_df.set_index("Schüler")

        # Schüler_df in csv_Datei, automatische Erstellung in Zielordner

        Schüler_df.to_csv("./Schüler.csv")

        # Lehrer in neuen DataFrame
        for l in Lehrer:
            Min_ges = sum(df["Dauer_min"].where(df["Lehrer"] == l.strip()).dropna())
            Minuten_ges_l.append(Min_ges)
            Bet_ges = Min_ges * Schüler_Min_Betrag
            Betrag_ges_l.append(Bet_ges)


        # neuer Dataframe
        Lehrer_df = pd.DataFrame(Lehrer, columns=["Lehrer"])
        Lehrer_df["Minuten_ges"] = Minuten_ges_l
        Lehrer_df["Betrag_ges"] = Betrag_ges_l
        Lehrer_df =Lehrer_df.set_index("Lehrer")

        # Lehrer_df in csv_Datei, automatische Erstellung in Zielordner
        Lehrer_df.to_csv("./Lehrer.csv")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
